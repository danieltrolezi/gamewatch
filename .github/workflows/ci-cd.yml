name: Application CI/CD

on:
  push:
    branches: [ "master" ]

jobs:
  tests-n-cs: 
    uses: ./.github/workflows/tests-n-cs.yml

  docker-image-ecr:
    runs-on: ubuntu-latest
    needs: tests-n-cs

    steps:
    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Build Docker image (PHP-fpm)
      run: docker build . --file Dockerfile.app --tag ${{ vars.DOCKER_IMAGE_TAG }}/php-fpm

    - name: Build Docker image (Nginx)
      run: docker build . --file Dockerfile.nginx --tag ${{ vars.DOCKER_IMAGE_TAG }}/nginx

    - name: Build Docker image (MySQL)
      run: docker build . --file Dockerfile.mysql --tag ${{ vars.DOCKER_IMAGE_TAG }}/mysql

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ vars.AWS_REGION }} \
        | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}

    - name: Tag Docker images
      run: |
        docker tag ${{ vars.DOCKER_IMAGE_TAG }}/php-fpm:latest ${{ secrets.ECR_REPOSITORY_URI }}:latest-php-fpm
        docker tag ${{ vars.DOCKER_IMAGE_TAG }}/nginx:latest ${{ secrets.ECR_REPOSITORY_URI }}:latest-nginx
        docker tag ${{ vars.DOCKER_IMAGE_TAG }}/mysql:latest ${{ secrets.ECR_REPOSITORY_URI }}:latest-mysql

    - name: Push Docker images to ECR
      run: |
        docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest-php-fpm
        docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest-nginx
        docker push ${{ secrets.ECR_REPOSITORY_URI }}:latest-mysql

  ecs-service-deploy:
    runs-on: ubuntu-latest
    needs: docker-image-ecr

    steps:
    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ vars.AWS_REGION }}

    - name: Update ECS task definition
      run: |
        sed -i 's|<ECS_TASK_EXEC_ROLE>|${{ secrets.ECS_TASK_EXEC_ROLE }}|' ./ecs/deployment-task.json
        sed -i 's|<SERVICE_DISCOVERY>|${{ secrets.SERVICE_DISCOVERY }}|' ./ecs/deployment-task.json
        sed -i 's|<SSM_NAMESPACE>|${{ secrets.SSM_NAMESPACE }}|' ./ecs/deployment-task.json
        sed -i 's|<IMAGE_PHP_FPM>|${{ secrets.ECR_REPOSITORY_URI }}:latest-php-fpm|' ./ecs/deployment-task.json
        sed -i 's|<IMAGE_NGINX>|${{ secrets.ECR_REPOSITORY_URI }}:latest-nginx|' ./ecs/deployment-task.json
        sed -i 's|<IMAGE_MYSQL>|${{ secrets.ECR_REPOSITORY_URI }}:latest-mysql|' ./ecs/deployment-task.json
    
    - name: Register updated task definition
      run: |
        aws ecs register-task-definition \
          --cli-input-json file://./ecs/deployment-task.json \
          --region ${{ vars.AWS_REGION }}

    - name: Deploy updated ECS service
      run: |
        aws ecs update-service \
          --cluster ${{ vars.ECS_CLUSTER }} \
          --service ${{ vars.ECS_SERVICE_NAME }} \
          --task-definition ${{ vars.ECS_SERVICE_NAME }}-task:latest \
          --force-new-deployment \
          --region ${{ vars.AWS_REGION }}